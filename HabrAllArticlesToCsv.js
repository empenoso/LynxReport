/**
 * LynxReport: —É—á—ë—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π üìö [Node.js Release]
 * 
 * –ü–∞—Ä—Å–∏–Ω–≥ –•–∞–±—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ –∫–∞–∫–∏–µ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —á–∏—Ç–∞—Ç–µ–ª—è–º
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ: https://habr.com/ru/articles/867068/
 *
 * @author Mikhail Shardin [–ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω] 
 * @site https://shardin.name/
 * 
 * Last updated: 16.12.2024
 * 
 */

const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const {
    parse
} = require('json2csv');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON —Å —Å–∞–π—Ç–∞
async function extractArticlesList(url) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const {
            data: html
        } = await axios.get(url);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –≤ Cheerio –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const $ = cheerio.load(html);

        // –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π `window.__INITIAL_STATE__`
        const scriptContent = $('script')
            .toArray()
            .map(script => $(script).html())
            .find(content => content && content.includes('window.__INITIAL_STATE__'));

        if (!scriptContent) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ __INITIAL_STATE__ –≤ HTML');
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        const jsonMatch = scriptContent.match(/window\.__INITIAL_STATE__\s*=\s*(\{.*\});/s);
        if (!jsonMatch || jsonMatch.length < 2) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ __INITIAL_STATE__');
        }

        // –ü–∞—Ä—Å–∏–º JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `articlesList`
        const initialState = JSON.parse(jsonMatch[1]);
        const initialJSON = initialState.articlesList.articlesList;
        // console.log(`JSON –≤ HTML –¥–ª—è ${url}: ${JSON.stringify(initialJSON, null, 2)}`);  

        return initialJSON;
    } catch (error) {
        // console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ URL: ${url}:`, error.message);
        return null;
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
async function fetchArticleData(url, articlesList) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ URL
        const articleIdMatch = url.match(/\/(\d+)\/?$/); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if (!articleIdMatch) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Å—Ç–∞—Ç—å–∏ –∏–∑ URL: ${url}`);
        }
        const articleId = articleIdMatch[1];

        // console.log(`–ò—â–µ–º —Å—Ç–∞—Ç—å—é —Å ID: ${articleId} –≤ articlesList`);
        // console.log(`–ö–ª—é—á–∏ –≤ articlesList: ${Object.keys(articlesList[articleId]).join(', ')}`);

        // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ ID
        const article = articlesList[articleId];
        // console.log(`JSON –¥–ª—è ${url}: ${JSON.stringify(article, null, 2)}`);
        if (!article) {
            throw new Error(`–°—Ç–∞—Ç—å—è —Å ID ${articleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }

        return {
            id: article.id,
            timePublished: article.timePublished,
            author: `${article.author.fullname}, @${article.author.alias}, –∫–∞—Ä–º–∞ ${article.author.scoreStats.score}`,
            isCorporative: article.isCorporative,
            title: article.titleHtml,
            hubs: article.hubs.map(hub => hub.title).join(', '),
            flows: article.flows.map(flow => flow.title).join(', '),
            shortDescription: article.leadData.textHtml,
            views: article.statistics.readingCount,
            comments: article.statistics.commentsCount,
            bookmarks: article.statistics.favoritesCount,
            rating: article.statistics.score,
            votesPlus: article.statistics.votesCountPlus,
            votesMinus: article.statistics.votesCountMinus
        };
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏ ${url}:`, error.message);
        return null;
    }
    return null;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
async function writeToCsv(data, outputPath) {
    try {
        const csv = parse(data, {
            fields: Object.keys(data[0]),
            delimiter: ';' // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
        });
        fs.writeFileSync(outputPath, csv, 'utf-8');
        console.log(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${outputPath}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ CSV:', error.message);
    }
}

(async () => {
    // –ë–∞–∑–æ–≤—ã–π URL –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π ID
    const baseUrl = 'https://habr.com/ru/articles/';
    let currentId = 866732; // –ù–∞—á–∞–ª—å–Ω—ã–π ID
    const articles = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    let i = 0; // –°—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–µ–π
    let successCount = 0; // –°—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —É—Å–ª–æ–≤–∏—è –∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã—Ö
    let processedCount = 0; // –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã—Ö
    let errorCount = 0; // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

    while (true) {
        const url = `${baseUrl}${currentId}/`; // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏                
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${i + 1}: ${url}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º articlesList - —ç—Ç–æ JSON —Å–æ –≤—Å–µ–º–∏ –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–∞–π—Ç–∞
            const articlesList = await extractArticlesList(url);

            if (!articlesList) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JSON —Å–æ –≤—Å–µ–º–∏ –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è ${url}`);
                i++;
                currentId--; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ
                errorCount++;
                continue;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            const articleData = await fetchArticleData(url, articlesList);
            if (!articleData) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${url}`);
                i++;
                currentId--;
                errorCount++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            const timePublished = new Date(articleData.timePublished); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
            const stopDate = new Date('2024-12-15'); // –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (timePublished < stopDate) {
                console.log(`\nüõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${timePublished.toISOString()}`);
                break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª
            }

            // –£—Å–ª–æ–≤–∏–µ: —Ä–µ–π—Ç–∏–Ω–≥ –±–æ–ª—å—à–µ 30 –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –±–æ–ª—å—à–µ 30 000
            if (articleData.rating > 30 || articleData.views > 30000) {                
                successCount++;
                articles.push(articleData);
                console.log(`‚úîÔ∏è –°—Ç–∞—Ç—å—è –æ—Ç ${timePublished.toISOString()} "${articleData.title}", id: ${currentId} —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è–º (—Ä–µ–π—Ç–∏–Ω–≥: ${articleData.rating}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${articleData.views}).`);
            } else {
                processedCount++;
                console.log(`‚úñÔ∏è –°—Ç–∞—Ç—å—è –æ—Ç ${timePublished.toISOString()} "${articleData.title}", id: ${currentId} –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è–º (—Ä–µ–π—Ç–∏–Ω–≥: ${articleData.rating}, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${articleData.views}).`);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if (articles.length > 0) {
                if (articles.length % 10 === 0) {
                    const outputPath = path.join(__dirname, 'articles.csv');
                    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª: ${outputPath}`);
                    await writeToCsv(articles, outputPath);
                }
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}: ${error.message}`);
        }

        i++;
        currentId--; // –£–º–µ–Ω—å—à–∞–µ–º ID –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (articles.length > 0) {
        const outputPath = path.join(__dirname, 'articles.csv');
        console.log(`üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª: ${outputPath}`);
        await writeToCsv(articles, outputPath);
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    console.log('\n--- –í—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---');
    console.log(`–ü–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è –∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${successCount}`);
    console.log(`–ë—ã–ª–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–æ–¥ —É—Å–ª–æ–≤–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç: ${processedCount}`);
    console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: ${errorCount}`);
})();